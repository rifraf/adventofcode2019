#
# Advent of Code 2019 day 7
#
require 'pp'
require 'test/unit'
require_relative '../intcode/intcode'

#===========================================================
# Test driver7a
#===========================================================
class Examples7a < Test::Unit::TestCase
  def test_1
    program = [3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0].freeze
    assert_equal 43210, max_thruster_signal(program, [4,3,2,1,0])
  end

  def test_2
    program = [3,23,3,24,1002,24,10,24,1002,23,-1,23,101,5,23,23,1,24,23,23,4,23,99,0,0].freeze
    assert_equal 54321, max_thruster_signal(program, [0,1,2,3,4])
  end

  def test_3
    program = [3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0].freeze
    assert_equal 65210, max_thruster_signal(program, [1,0,4,3,2])
  end

  def test_part1
    program = [3,8,1001,8,10,8,105,1,0,0,21,42,63,76,101,114,195,276,357,438,99999,3,9,101,2,9,9,102,5,9,9,1001,9,3,9,1002,9,5,9,4,9,99,3,9,101,4,9,9,102,5,9,9,1001,9,5,9,102,2,9,9,4,9,99,3,9,1001,9,3,9,1002,9,5,9,4,9,99,3,9,1002,9,2,9,101,5,9,9,102,3,9,9,101,2,9,9,1002,9,3,9,4,9,99,3,9,101,3,9,9,102,2,9,9,4,9,99,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,99]
    result = [0, 1, 2, 3, 4].permutation.map do |phase|
      max_thruster_signal(program, phase)
    end.max
    p result
    assert_equal 255590, result # <- correct
  end
end

#===========================================================
def max_thruster_signal(program, phases)
  # A amplifier
  input = [phases.shift, 0]
  output = []
  run_intcode(input, output, *program.dup)

  # B amplifier
  input = [phases.shift, output[0]]
  output = []
  run_intcode(input, output, *program.dup)

  # C amplifier
  input = [phases.shift, output[0]]
  output = []
  run_intcode(input, output, *program.dup)

  # D amplifier
  input = [phases.shift, output[0]]
  output = []
  run_intcode(input, output, *program.dup)

  # E amplifier
  input = [phases.shift, output[0]]
  output = []
  run_intcode(input, output, *program.dup)
  output[0]
end
